// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  avatar        String?
  password      String?
  role          UserRole  @default(CLIENT)
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  serviceProvider     ServiceProvider?
  clientProjects      Project[]              @relation("ClientProjects")
  providerProjects    Project[]              @relation("ProviderProjects")
  proposals           Proposal[]
  sentMessages        Message[]              @relation("SentMessages")
  conversations       ConversationUser[]
  reviewsGiven        Review[]               @relation("ReviewsGiven")
  reviewsReceived     Review[]               @relation("ReviewsReceived")
  paymentsGiven       Payment[]              @relation("PaymentsGiven")
  paymentsReceived    Payment[]              @relation("PaymentsReceived")
  notifications       Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ServiceProvider {
  id               String                    @id @default(cuid())
  userId           String                    @unique
  title            String
  bio              String                    @db.Text
  hourlyRate       Float
  availability     AvailabilityStatus        @default(AVAILABLE)
  timezone         String
  responseTime     String
  completedProjects Int                      @default(0)
  rating           Float                     @default(0)
  reviewCount      Int                       @default(0)
  isVerified       Boolean                   @default(false)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills              ServiceProviderSkill[]
  categories          ServiceProviderCategory[]
  portfolio           PortfolioItem[]
  languages           ServiceProviderLanguage[]
  verificationBadges  VerificationBadge[]
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  serviceProviders ServiceProviderSkill[]
}

model ServiceProviderSkill {
  id                String     @id @default(cuid())
  serviceProviderId String
  skillId           String
  level             SkillLevel
  isVerified        Boolean    @default(false)

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  skill           Skill           @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([serviceProviderId, skillId])
}

model ServiceCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  createdAt   DateTime @default(now())

  serviceProviders ServiceProviderCategory[]
  projects         Project[]
}

model ServiceProviderCategory {
  id                String @id @default(cuid())
  serviceProviderId String
  categoryId        String

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  category        ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([serviceProviderId, categoryId])
}

model Language {
  id   String @id @default(cuid())
  code String @unique
  name String @unique

  serviceProviders ServiceProviderLanguage[]
}

model ServiceProviderLanguage {
  id                String              @id @default(cuid())
  serviceProviderId String
  languageId        String
  proficiency       LanguageProficiency

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  language        Language        @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([serviceProviderId, languageId])
}

model PortfolioItem {
  id                String   @id @default(cuid())
  serviceProviderId String
  title             String
  description       String   @db.Text
  images            String[]
  projectUrl        String?
  categoryId        String
  tags              String[]
  createdAt         DateTime @default(now())

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  category        ServiceCategory @relation(fields: [categoryId], references: [id])
}

model VerificationBadge {
  id                String           @id @default(cuid())
  serviceProviderId String
  type              VerificationType
  issuedAt          DateTime         @default(now())
  expiresAt         DateTime?

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
}

model Project {
  id                String            @id @default(cuid())
  title             String
  description       String            @db.Text
  categoryId        String
  subcategory       String?
  clientId          String
  serviceProviderId String?
  status            ProjectStatus     @default(DRAFT)
  budgetType        BudgetType
  budgetAmount      Float
  currency          String            @default("USD")
  hourlyRate        Float?
  estimatedHours    Int?
  startDate         DateTime?
  endDate           DateTime?
  estimatedDuration Int // in days
  actualDuration    Int?
  requirements      String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  category        ServiceCategory @relation(fields: [categoryId], references: [id])
  client          User            @relation("ClientProjects", fields: [clientId], references: [id])
  serviceProvider User?           @relation("ProviderProjects", fields: [serviceProviderId], references: [id])
  proposals       Proposal[]
  milestones      Milestone[]
  attachments     Attachment[]
  conversations   Conversation[]
  reviews         Review[]
  payments        Payment[]
}

model Proposal {
  id                    String              @id @default(cuid())
  projectId             String
  serviceProviderId     String
  coverLetter           String              @db.Text
  budgetType            BudgetType
  budgetAmount          Float
  currency              String              @default("USD")
  hourlyRate            Float?
  estimatedHours        Int?
  estimatedDuration     Int // in days
  status                ProposalStatus      @default(PENDING)
  submittedAt           DateTime            @default(now())
  respondedAt           DateTime?

  project         Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  serviceProvider User                @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  milestones      ProposedMilestone[]
  attachments     Attachment[]

  @@unique([projectId, serviceProviderId])
}

model ProposedMilestone {
  id           String @id @default(cuid())
  proposalId   String
  title        String
  description  String @db.Text
  amount       Float
  estimatedDays Int
  deliverables String[]

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
}

model Milestone {
  id           String          @id @default(cuid())
  projectId    String
  title        String
  description  String          @db.Text
  amount       Float
  dueDate      DateTime
  status       MilestoneStatus @default(PENDING)
  deliverables String[]
  createdAt    DateTime        @default(now())
  completedAt  DateTime?

  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  payments Payment[]
}

model Attachment {
  id         String   @id @default(cuid())
  filename   String
  url        String
  size       Int
  mimeType   String
  uploadedAt DateTime @default(now())
  projectId  String?
  proposalId String?

  project  Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  proposal Proposal? @relation(fields: [proposalId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(cuid())
  projectId     String?
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project      Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  participants ConversationUser[]
  messages     Message[]
}

model ConversationUser {
  id             String @id @default(cuid())
  conversationId String
  userId         String
  unreadCount    Int    @default(0)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  content        String      @db.Text
  messageType    MessageType @default(TEXT)
  isRead         Boolean     @default(false)
  sentAt         DateTime    @default(now())
  editedAt       DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  attachments  Attachment[]
}

model Review {
  id         String            @id @default(cuid())
  projectId  String
  reviewerId String
  revieweeId String
  rating     Int
  comment    String            @db.Text
  categories ReviewCategory[]
  isPublic   Boolean           @default(true)
  createdAt  DateTime          @default(now())
  response   ReviewResponse?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reviewer  User    @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee  User    @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@unique([projectId, reviewerId, revieweeId])
}

model ReviewCategory {
  id       String @id @default(cuid())
  reviewId String
  name     String
  rating   Int

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model ReviewResponse {
  id        String   @id @default(cuid())
  reviewId  String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(cuid())
  projectId     String
  milestoneId   String?
  payerId       String
  payeeId       String
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  createdAt     DateTime      @default(now())
  processedAt   DateTime?

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone Milestone? @relation(fields: [milestoneId], references: [id])
  payer     User       @relation("PaymentsGiven", fields: [payerId], references: [id], onDelete: Cascade)
  payee     User       @relation("PaymentsReceived", fields: [payeeId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String           @db.Text
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  CLIENT
  SERVICE_PROVIDER
  ADMIN
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  UNAVAILABLE
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum LanguageProficiency {
  BASIC
  CONVERSATIONAL
  FLUENT
  NATIVE
}

enum VerificationType {
  IDENTITY
  SKILL
  BACKGROUND_CHECK
  EDUCATION
  CERTIFICATION
}

enum ProjectStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  CANCELLED
  DISPUTED
}

enum BudgetType {
  FIXED
  HOURLY
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTOCURRENCY
}

enum NotificationType {
  PROJECT_UPDATE
  NEW_MESSAGE
  PROPOSAL_RECEIVED
  PROPOSAL_ACCEPTED
  MILESTONE_COMPLETED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  SYSTEM_ANNOUNCEMENT
}
